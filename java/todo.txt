### NOTES ###

# CHRIS #
-- put.html does not function to update:: got lazy and figured we wouldn't use this JS anyway
	... the important part being that we understand how the AJAX process works with the Java RestAPI

### TEAM TIPS ###

# CHRIS #
Make a shortcut command to start WLS (ex: 'upwlsstart') and use grep "LOG", i use this to red highlight my logs in the console


### // TEAM TIPS ###

/!\ Cleaner modularization ... obviously this is just following the tutorial
Rename classes
Upgrade from Jersey 1.x to 2.9
JSON: use Google's GSON? jettison?
-- abstract JSON converter classes for easy library switching
Build or find Exception handler (at least, abstract one layer for easy modification)
Build or find Log handler (same, abstract one layer for easy switching)
	-- code ex: log.i("GET: v1/status")
	-- log.d etc ...
Start determining Rest API functions & tree structure
-- status
	- version
	- etc...
-- foods
	- ?
-- users
	- ?
Should we use ENUMs for naming paths? @Path("v1/status") ... @Path(Api.VERSION + Api.FOODS + Api.GetFoodAction) // or something like that

Mongo/JDBC: create class & determine better query building protocol/method
Locales: put all strings into locale files (as on Android) for easy translation and less technical debt
Implement cache function (with variable expiration length) to alleviate DB queries ?

ESAPI: Using 1.4.4 (deprecated!) for tutorial ONLY
	- jersey encodes for us, still use esapi?

column `nutritianContent` : correct name (nutrition) and formation (subcolumns end up blackslashed so not JSONized)
